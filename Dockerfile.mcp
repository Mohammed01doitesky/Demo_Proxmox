FROM node:18-alpine

WORKDIR /app

# Copy MCP server files
COPY mcp/ ./

# Install dependencies
RUN npm install

# Set environment variables
ENV NODE_TLS_REJECT_UNAUTHORIZED=0
ENV PROXMOX_HOST=188.40.98.142
ENV PROXMOX_USER=root@pam
ENV PROXMOX_TOKEN_NAME=mcpserver
ENV PROXMOX_PORT=8006
ENV PROXMOX_ALLOW_ELEVATED=false

# Expose port for HTTP API
EXPOSE 3001

# Create HTTP wrapper for MCP server
RUN cat > http-mcp-server.js << 'EOF'
import express from 'express';
import { spawn } from 'child_process';
import { v4 as uuidv4 } from 'uuid';

const app = express();
app.use(express.json());

let mcpProcess = null;
const pendingRequests = new Map();

// Start MCP server
function startMCPServer() {
  mcpProcess = spawn('node', ['index.js'], {
    stdio: ['pipe', 'pipe', 'pipe'],
    env: { ...process.env, NODE_TLS_REJECT_UNAUTHORIZED: '0' }
  });

  mcpProcess.stdout.on('data', (data) => {
    const response = data.toString();
    console.log('MCP Response:', response);
    
    try {
      const parsed = JSON.parse(response);
      if (parsed.id && pendingRequests.has(parsed.id)) {
        const { res } = pendingRequests.get(parsed.id);
        res.json(parsed);
        pendingRequests.delete(parsed.id);
      }
    } catch (error) {
      console.error('Failed to parse MCP response:', error);
    }
  });

  mcpProcess.stderr.on('data', (data) => {
    console.error('MCP Error:', data.toString());
  });

  mcpProcess.on('exit', (code) => {
    console.log('MCP process exited with code:', code);
    setTimeout(startMCPServer, 1000); // Restart after 1 second
  });
}

// Initialize MCP connection
app.post('/initialize', (req, res) => {
  const initMessage = {
    jsonrpc: '2.0',
    id: uuidv4(),
    method: 'initialize',
    params: {
      protocolVersion: '2024-11-05',
      capabilities: { tools: {} },
      clientInfo: { name: 'proximox-dashboard', version: '1.0.0' }
    }
  };
  
  pendingRequests.set(initMessage.id, { res });
  mcpProcess.stdin.write(JSON.stringify(initMessage) + '\n');
});

// List tools
app.post('/list-tools', (req, res) => {
  const toolsMessage = {
    jsonrpc: '2.0',
    id: uuidv4(),
    method: 'tools/list',
    params: {}
  };
  
  pendingRequests.set(toolsMessage.id, { res });
  mcpProcess.stdin.write(JSON.stringify(toolsMessage) + '\n');
});

// Call tool
app.post('/call-tool', (req, res) => {
  const { name, arguments: args } = req.body;
  const callMessage = {
    jsonrpc: '2.0',
    id: uuidv4(),
    method: 'tools/call',
    params: { name, arguments: args || {} }
  };
  
  pendingRequests.set(callMessage.id, { res });
  mcpProcess.stdin.write(JSON.stringify(callMessage) + '\n');
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'ok', mcpRunning: mcpProcess && !mcpProcess.killed });
});

startMCPServer();

const PORT = process.env.PORT || 3001;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`MCP HTTP server running on port ${PORT}`);
});
EOF

# Install express and uuid
RUN npm install express uuid

CMD ["node", "http-mcp-server.js"]